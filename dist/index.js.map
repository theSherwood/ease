{
  "version": 3,
  "sources": ["../src/fridx.ts", "../src/storage.ts", "../src/tiny.ts", "../src/types.ts", "../src/tasks.ts", "../src/index.ts"],
  "sourcesContent": ["// License: CC0 (no rights reserved).\n\n// This is based on https://observablehq.com/@dgreensp/implementing-fractional-indexing\n\nexport const BASE_62_DIGITS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n\n// `a` may be empty string, `b` is null or non-empty string.\n// `a < b` lexicographically if `b` is non-null.\n// no trailing zeros allowed.\n// digits is a string such as '0123456789' for base 10.  Digits must be in\n// ascending character code order!\n/**\n * @param {string} a\n * @param {string | null | undefined} b\n * @param {string} digits\n * @returns {string}\n */\nfunction midpoint(a, b, digits) {\n  const zero = digits[0];\n  if (b != null && a >= b) {\n    throw new Error(a + ' >= ' + b);\n  }\n  if (a.slice(-1) === zero || (b && b.slice(-1) === zero)) {\n    throw new Error('trailing zero');\n  }\n  if (b) {\n    // remove longest common prefix.  pad `a` with 0s as we\n    // go.  note that we don't need to pad `b`, because it can't\n    // end before `a` while traversing the common prefix.\n    let n = 0;\n    while ((a[n] || zero) === b[n]) {\n      n++;\n    }\n    if (n > 0) {\n      return b.slice(0, n) + midpoint(a.slice(n), b.slice(n), digits);\n    }\n  }\n  // first digits (or lack of digit) are different\n  const digitA = a ? digits.indexOf(a[0]) : 0;\n  const digitB = b != null ? digits.indexOf(b[0]) : digits.length;\n  if (digitB - digitA > 1) {\n    const midDigit = Math.round(0.5 * (digitA + digitB));\n    return digits[midDigit];\n  } else {\n    // first digits are consecutive\n    if (b && b.length > 1) {\n      return b.slice(0, 1);\n    } else {\n      // `b` is null or has length 1 (a single digit).\n      // the first digit of `a` is the previous digit to `b`,\n      // or 9 if `b` is null.\n      // given, for example, midpoint('49', '5'), return\n      // '4' + midpoint('9', null), which will become\n      // '4' + '9' + midpoint('', null), which is '495'\n      return digits[digitA] + midpoint(a.slice(1), null, digits);\n    }\n  }\n}\n\n/**\n * @param {string} int\n * @return {void}\n */\n\nfunction validateInteger(int) {\n  if (int.length !== getIntegerLength(int[0])) {\n    throw new Error('invalid integer part of order key: ' + int);\n  }\n}\n\n/**\n * @param {string} head\n * @return {number}\n */\n\nfunction getIntegerLength(head) {\n  if (head >= 'a' && head <= 'z') {\n    return head.charCodeAt(0) - 'a'.charCodeAt(0) + 2;\n  } else if (head >= 'A' && head <= 'Z') {\n    return 'Z'.charCodeAt(0) - head.charCodeAt(0) + 2;\n  } else {\n    throw new Error('invalid order key head: ' + head);\n  }\n}\n\n/**\n * @param {string} key\n * @return {string}\n */\n\nfunction getIntegerPart(key) {\n  const integerPartLength = getIntegerLength(key[0]);\n  if (integerPartLength > key.length) {\n    throw new Error('invalid order key: ' + key);\n  }\n  return key.slice(0, integerPartLength);\n}\n\n/**\n * @param {string} key\n * @param {string} digits\n * @return {void}\n */\n\nfunction validateOrderKey(key, digits) {\n  if (key === 'A' + digits[0].repeat(26)) {\n    throw new Error('invalid order key: ' + key);\n  }\n  // getIntegerPart will throw if the first character is bad,\n  // or the key is too short.  we'd call it to check these things\n  // even if we didn't need the result\n  const i = getIntegerPart(key);\n  const f = key.slice(i.length);\n  if (f.slice(-1) === digits[0]) {\n    throw new Error('invalid order key: ' + key);\n  }\n}\n\n// note that this may return null, as there is a largest integer\n/**\n * @param {string} x\n * @param {string} digits\n * @return {string | null}\n */\nfunction incrementInteger(x, digits) {\n  validateInteger(x);\n  const [head, ...digs] = x.split('');\n  let carry = true;\n  for (let i = digs.length - 1; carry && i >= 0; i--) {\n    const d = digits.indexOf(digs[i]) + 1;\n    if (d === digits.length) {\n      digs[i] = digits[0];\n    } else {\n      digs[i] = digits[d];\n      carry = false;\n    }\n  }\n  if (carry) {\n    if (head === 'Z') {\n      return 'a' + digits[0];\n    }\n    if (head === 'z') {\n      return null;\n    }\n    const h = String.fromCharCode(head.charCodeAt(0) + 1);\n    if (h > 'a') {\n      digs.push(digits[0]);\n    } else {\n      digs.pop();\n    }\n    return h + digs.join('');\n  } else {\n    return head + digs.join('');\n  }\n}\n\n// note that this may return null, as there is a smallest integer\n/**\n * @param {string} x\n * @param {string} digits\n * @return {string | null}\n */\n\nfunction decrementInteger(x, digits) {\n  validateInteger(x);\n  const [head, ...digs] = x.split('');\n  let borrow = true;\n  for (let i = digs.length - 1; borrow && i >= 0; i--) {\n    const d = digits.indexOf(digs[i]) - 1;\n    if (d === -1) {\n      digs[i] = digits.slice(-1);\n    } else {\n      digs[i] = digits[d];\n      borrow = false;\n    }\n  }\n  if (borrow) {\n    if (head === 'a') {\n      return 'Z' + digits.slice(-1);\n    }\n    if (head === 'A') {\n      return null;\n    }\n    const h = String.fromCharCode(head.charCodeAt(0) - 1);\n    if (h < 'Z') {\n      digs.push(digits.slice(-1));\n    } else {\n      digs.pop();\n    }\n    return h + digs.join('');\n  } else {\n    return head + digs.join('');\n  }\n}\n\n// `a` is an order key or null (START).\n// `b` is an order key or null (END).\n// `a < b` lexicographically if both are non-null.\n// digits is a string such as '0123456789' for base 10.  Digits must be in\n// ascending character code order!\n/**\n * @param {string | null | undefined} a\n * @param {string | null | undefined} b\n * @param {string=} digits\n * @return {string}\n */\nexport function generateKeyBetween(a, b, digits = BASE_62_DIGITS) {\n  if (a != null) {\n    validateOrderKey(a, digits);\n  }\n  if (b != null) {\n    validateOrderKey(b, digits);\n  }\n  if (a != null && b != null && a >= b) {\n    throw new Error(a + ' >= ' + b);\n  }\n  if (a == null) {\n    if (b == null) {\n      return 'a' + digits[0];\n    }\n\n    const ib = getIntegerPart(b);\n    const fb = b.slice(ib.length);\n    if (ib === 'A' + digits[0].repeat(26)) {\n      return ib + midpoint('', fb, digits);\n    }\n    if (ib < b) {\n      return ib;\n    }\n    const res = decrementInteger(ib, digits);\n    if (res == null) {\n      throw new Error('cannot decrement any more');\n    }\n    return res;\n  }\n\n  if (b == null) {\n    const ia = getIntegerPart(a);\n    const fa = a.slice(ia.length);\n    const i = incrementInteger(ia, digits);\n    return i == null ? ia + midpoint(fa, null, digits) : i;\n  }\n\n  const ia = getIntegerPart(a);\n  const fa = a.slice(ia.length);\n  const ib = getIntegerPart(b);\n  const fb = b.slice(ib.length);\n  if (ia === ib) {\n    return ia + midpoint(fa, fb, digits);\n  }\n  const i = incrementInteger(ia, digits);\n  if (i == null) {\n    throw new Error('cannot increment any more');\n  }\n  if (i < b) {\n    return i;\n  }\n  return ia + midpoint(fa, null, digits);\n}\n\n/**\n * same preconditions as generateKeysBetween.\n * n >= 0.\n * Returns an array of n distinct keys in sorted order.\n * If a and b are both null, returns [a0, a1, ...]\n * If one or the other is null, returns consecutive \"integer\"\n * keys.  Otherwise, returns relatively short keys between\n * a and b.\n * @param {string | null | undefined} a\n * @param {string | null | undefined} b\n * @param {number} n\n * @param {string} digits\n * @return {string[]}\n */\nexport function generateNKeysBetween(a, b, n, digits = BASE_62_DIGITS) {\n  if (n === 0) {\n    return [];\n  }\n  if (n === 1) {\n    return [generateKeyBetween(a, b, digits)];\n  }\n  if (b == null) {\n    let c = generateKeyBetween(a, b, digits);\n    const result = [c];\n    for (let i = 0; i < n - 1; i++) {\n      c = generateKeyBetween(c, b, digits);\n      result.push(c);\n    }\n    return result;\n  }\n  if (a == null) {\n    let c = generateKeyBetween(a, b, digits);\n    const result = [c];\n    for (let i = 0; i < n - 1; i++) {\n      c = generateKeyBetween(a, c, digits);\n      result.push(c);\n    }\n    result.reverse();\n    return result;\n  }\n  const mid = Math.floor(n / 2);\n  const c = generateKeyBetween(a, b, digits);\n  return [\n    ...generateNKeysBetween(a, c, mid, digits),\n    c,\n    ...generateNKeysBetween(c, b, n - mid - 1, digits),\n  ];\n}\n", "import { TaskConfig } from './types';\n\nexport const EASE_STORE = 'ease_store';\n\nlet maxId = 0;\nexport function getId() {\n  return ++maxId;\n}\n\nexport function getMaxIdForStore(db: IDBDatabase, storeName: string): Promise<number> {\n  return new Promise((resolve, reject) => {\n    let store;\n    try {\n      const transaction = db.transaction(storeName, 'readonly');\n      store = transaction.objectStore(storeName);\n    } catch (e) {\n      console.warn(e);\n      resolve(0);\n    }\n\n    // Use the .openCursor() method with descending order on the primary key\n    const request = store.openCursor(null, 'prev');\n\n    request.onsuccess = (event) => {\n      const cursor = event.target.result;\n      if (cursor) {\n        resolve(cursor.key); // Max ID\n      } else {\n        resolve(0); // No records found\n      }\n    };\n\n    request.onerror = () => reject('Error retrieving max ID');\n  });\n}\n\nexport class KVStore<T> {\n  db: IDBDatabase | null = null;\n  readonly dbName: string;\n  readonly storeName: string;\n\n  constructor(dbName: string, storeName: string) {\n    this.dbName = dbName;\n    this.storeName = storeName;\n  }\n\n  async connect(): Promise<IDBDatabase> {\n    if (this.db) return this.db;\n\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, 1);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        this.db = request.result;\n        resolve(request.result);\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n        if (!db.objectStoreNames.contains(this.storeName)) {\n          db.createObjectStore(this.storeName);\n        }\n      };\n    });\n  }\n\n  async set(key: string, value: T): Promise<void> {\n    const db = await this.connect();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(this.storeName, 'readwrite');\n      const store = tx.objectStore(this.storeName);\n      const request = store.put(value, key);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve();\n    });\n  }\n\n  async get(key: string): Promise<T | null> {\n    const db = await this.connect();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(this.storeName, 'readonly');\n      const store = tx.objectStore(this.storeName);\n      const request = store.get(key);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve(request.result || null);\n    });\n  }\n\n  async delete(key: string): Promise<void> {\n    const db = await this.connect();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(this.storeName, 'readwrite');\n      const store = tx.objectStore(this.storeName);\n      const request = store.delete(key);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve();\n    });\n  }\n}\n\ninterface HasId {\n  id?: number;\n}\n\nexport class ListStore<T extends HasId> {\n  db: IDBDatabase | null = null;\n  readonly dbName: string;\n  readonly storeName: string;\n\n  constructor(dbName: string, storeName: string) {\n    this.dbName = dbName;\n    this.storeName = storeName;\n  }\n\n  async connect(): Promise<IDBDatabase> {\n    if (this.db) return this.db;\n\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, 1);\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => {\n        this.db = request.result;\n        resolve(request.result);\n      };\n\n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result;\n        if (!db.objectStoreNames.contains(this.storeName)) {\n          db.createObjectStore(this.storeName, {\n            keyPath: 'id',\n            autoIncrement: true,\n          });\n        }\n      };\n    });\n  }\n\n  async add(record: T): Promise<void> {\n    const db = await this.connect();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(this.storeName, 'readwrite');\n      const store = tx.objectStore(this.storeName);\n      store.add(record);\n      tx.oncomplete = () => resolve();\n      tx.onerror = () => reject(tx.error);\n    });\n  }\n\n  async bulkAdd(records: T[]): Promise<void> {\n    const db = await this.connect();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(this.storeName, 'readwrite');\n      const store = tx.objectStore(this.storeName);\n      for (const record of records) {\n        store.add(record);\n      }\n      tx.oncomplete = () => resolve();\n      tx.onerror = () => reject(tx.error);\n    });\n  }\n\n  async get(id: number): Promise<T | null> {\n    const db = await this.connect();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(this.storeName, 'readonly');\n      const store = tx.objectStore(this.storeName);\n      const request = store.get(id);\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve(request.result || null);\n    });\n  }\n\n  async getAll(): Promise<T[]> {\n    const db = await this.connect();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(this.storeName, 'readonly');\n      const store = tx.objectStore(this.storeName);\n      const request = store.getAll();\n\n      request.onerror = () => reject(request.error);\n      request.onsuccess = () => resolve(request.result);\n    });\n  }\n\n  async delete(id: number): Promise<void> {\n    const db = await this.connect();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(this.storeName, 'readwrite');\n      const store = tx.objectStore(this.storeName);\n      store.delete(id);\n      tx.oncomplete = () => resolve();\n      tx.onerror = () => reject(tx.error);\n    });\n  }\n\n  async upsert(record: Partial<T>): Promise<void> {\n    const db = await this.connect();\n    return new Promise((resolve, reject) => {\n      const tx = db.transaction(this.storeName, 'readwrite');\n      const store = tx.objectStore(this.storeName);\n      store.put(record);\n      tx.oncomplete = () => resolve();\n      tx.onerror = () => reject(tx.error);\n    });\n  }\n\n  async *iterate(): AsyncGenerator<T> {\n    const db = await this.connect();\n    const tx = db.transaction(this.storeName, 'readonly');\n    const store = tx.objectStore(this.storeName);\n    const request = store.openCursor();\n\n    let cursor: IDBCursorWithValue | null = await new Promise((resolve) => {\n      request.onsuccess = () => resolve(request.result);\n    });\n\n    while (cursor) {\n      yield cursor.value;\n      cursor = await new Promise((resolve) => {\n        cursor!.continue();\n        request.onsuccess = () => resolve(request.result);\n      });\n    }\n  }\n}\n\nexport const taskStore = new ListStore<TaskConfig>(EASE_STORE, 'tasks');\nexport const audioStore = new ListStore<TaskConfig>(EASE_STORE, 'audio');\n\nexport async function setupStore() {\n  await taskStore.connect();\n  await audioStore.connect();\n  let id = await getMaxIdForStore(taskStore.db!, 'tasks');\n  if (id > maxId) maxId = id;\n  id = await getMaxIdForStore(audioStore.db!, 'audio');\n  if (id > maxId) maxId = id;\n}\n", "const assignDeep = (elm: HTMLElement, props: Record<string, any>): void => {\n  Object.entries(props).forEach(([key, value]) => {\n    if (typeof value === 'object' && value !== null) {\n      assignDeep(elm[key as keyof HTMLElement] as HTMLElement, value);\n    } else {\n      Object.assign(elm, { [key]: value });\n    }\n  });\n};\n\n// prettier-ignore\nconst tags = [\n  'a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base',\n  'bdi', 'bdo', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', \n  'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', \n  'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset',\n  'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', \n  'h6', 'head', 'header', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins',\n  'kbd', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'meta', \n  'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', \n  'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', \n  'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', \n  'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'template', \n  'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', \n  'ul', 'var', 'video', 'wbr'\n] as const;\n\nexport const dom = {} as unknown as Record<(typeof tags)[number], (...args: any[]) => HTMLElement>;\n\ntags.forEach((tag) => {\n  dom[tag] = (...args: any[]) => {\n    const props = typeof args[0] === 'object' && !(args[0] instanceof Node) ? args.shift() : {};\n    const elm = document.createElement(tag);\n    assignDeep(elm, props);\n    elm.append(...args.map((a) => (typeof a === 'string' ? document.createTextNode(a) : a)));\n    return elm;\n  };\n});\n\nexport const $ = (selector: string) => document.querySelector(selector);\nexport const $$ = (selector: string) => Array.from(document.querySelectorAll(selector));\nexport function createState<T>(\n  state: T & Record<string, any>,\n): T & {\n  _updates: Record<string, Function[]>;\n  _update: (s: string) => void;\n  addUpdate: (s: string, u: Function) => void;\n} {\n  const appState = {\n    ...state,\n    _updates: Object.fromEntries(Object.keys(state).map((s) => [s, [] as Function[]])),\n    _update: (s: string) => appState._updates[s].forEach((u: Function) => u()),\n    addUpdate: (s: string, u: Function) => appState._updates[s].push(u),\n  };\n  return new Proxy(appState, {\n    set(o, p, v) {\n      o[p as keyof typeof o] = v;\n      o._update(p as string);\n      return true;\n    },\n  });\n}\n", "export const TASK_SESSION = 0;\nexport const TASK_ACTIVE = 1;\nexport const TASK_RECURRING = 2;\nexport const TASK_COMPLETED = 3;\n\nexport type TaskStatus =\n  | typeof TASK_SESSION\n  | typeof TASK_ACTIVE\n  | typeof TASK_RECURRING\n  | typeof TASK_COMPLETED;\n\nexport type TaskConfig = {\n  id: number;\n  description: string;\n  status: TaskStatus;\n  timeEstimate: number;\n  timeRemaining: number;\n  createdAt: number;\n  completedAt: number;\n  fridx: string;\n};\n", "import { generateKeyBetween } from './fridx';\nimport { ListStore, EASE_STORE, getId, taskStore, audioStore } from './storage';\nimport { createState, $, $$, dom } from './tiny';\nimport { TASK_COMPLETED, TASK_SESSION, TASK_RECURRING, TaskConfig, TaskStatus } from './types';\n\nconst windowId = Math.random().toString(36);\nconst channel = new BroadcastChannel('ease');\ntype MessageTypes =\n  | 'createTask'\n  | 'deleteTask'\n  | 'updateTask'\n  | 'resetTasks'\n  | 'resetAudio'\n  | 'updateTaskField';\ntype Message = {\n  type: MessageTypes;\n  id: number;\n  field?: keyof TaskConfig;\n  prev?: any;\n};\n\nlet maxMessageId = 0;\nfunction getMessageId() {\n  return ++maxMessageId;\n}\n\n// Map of pending messages and their resolvers so that the sender can await a response\nfunction postTaskMessage(data: Message) {\n  channel.postMessage({ data, windowId });\n}\n\n// All tabs update state from the storage on message\nchannel.addEventListener('message', async (e) => {\n  let data: Message = e.data.data;\n  console.log('received message', data);\n  if (data.type === 'deleteTask') {\n    removeTaskFromList(data.id, sessionTasks);\n    removeTaskFromList(data.id, recurringTasks);\n    removeTaskFromList(data.id, completedTasks);\n  }\n  if (data.type === 'createTask') {\n    onCreateTask(data.id);\n  }\n  if (data.type === 'updateTask') {\n    //\n  }\n  if (data.type === 'updateTaskField') {\n    if (data.field === 'status') {\n      let prevStatus = data.prev;\n      if (prevStatus === TASK_SESSION) removeTaskFromList(data.id, sessionTasks);\n      if (prevStatus === TASK_RECURRING) removeTaskFromList(data.id, recurringTasks);\n      if (prevStatus === TASK_COMPLETED) removeTaskFromList(data.id, completedTasks);\n      await onCreateTask(data.id);\n    } else if (data.field === 'fridx') {\n      console.log('fridx update', data);\n      let res = await taskFromId(data.id);\n      if (!res) return;\n      let { task, config } = res;\n      let tasks: TaskListState;\n      if (config.status === TASK_SESSION) tasks = sessionTasks;\n      if (config.status === TASK_RECURRING) tasks = recurringTasks;\n      if (config.status === TASK_COMPLETED) tasks = completedTasks;\n      tasks!.list.sort((a, b) => a.fridx.localeCompare(b.fridx));\n      tasks!.list = tasks!.list;\n    } else {\n      let res = await taskFromId(data.id);\n      if (!res) return;\n      let { task, config } = res;\n      task[data.field! as string] = config[data.field!];\n    }\n  }\n  if (data.type === 'resetTasks') {\n    populateTasks();\n  }\n  if (data.type === 'resetAudio') {\n    // TODO\n  }\n});\n\nexport type Task = ReturnType<typeof taskFromTaskConfig>;\nexport type TaskList = { list: Task[] };\nexport type TaskListState = ReturnType<typeof createState<TaskList>>;\n\nfunction taskFromTaskConfig(config: TaskConfig) {\n  return createState(config);\n}\nasync function storeTask(config: TaskConfig) {\n  config.id = getId();\n  if (!config.fridx) {\n    let lastTask;\n    if (config.status === TASK_SESSION) lastTask = sessionTasks.list[sessionTasks.list.length - 1];\n    if (config.status === TASK_RECURRING)\n      lastTask = recurringTasks.list[recurringTasks.list.length - 1];\n    if (config.status === TASK_COMPLETED)\n      lastTask = completedTasks.list[completedTasks.list.length - 1];\n    config.fridx = generateKeyBetween(lastTask?.fridx || null, null);\n  }\n  await taskStore.add(config);\n  return taskFromTaskConfig(config);\n}\n\nexport const sessionTasks = createState<TaskList>({ list: [] });\nexport const recurringTasks = createState<TaskList>({ list: [] });\nexport const completedTasks = createState<TaskList>({ list: [] });\n\nasync function onCreateTask(id: number) {\n  const taskConfig = await taskStore.get(id);\n  if (taskConfig === null) return;\n  const task = taskFromTaskConfig(taskConfig);\n  if (taskConfig.status === TASK_SESSION) addTaskToList(task, sessionTasks);\n  if (taskConfig.status === TASK_RECURRING) addTaskToList(task, recurringTasks);\n  if (taskConfig.status === TASK_COMPLETED) addTaskToList(task, completedTasks);\n}\n\nexport function idxFromTask(id: number, status: TaskStatus) {\n  let list: Task[] = [];\n  if (status === TASK_SESSION) list = sessionTasks.list;\n  if (status === TASK_RECURRING) list = recurringTasks.list;\n  if (status === TASK_COMPLETED) list = completedTasks.list;\n  return { idx: list.findIndex((t) => t.id === id), list };\n}\n\nexport async function idxFromId(id: number) {\n  const taskConfig = await taskStore.get(id);\n  if (taskConfig === null) return { idx: -1, list: [] };\n  return idxFromTask(id, taskConfig.status);\n}\n\nexport async function taskFromId(\n  id: number,\n): Promise<{ task: Task; config: TaskConfig } | undefined> {\n  const taskConfig = await taskStore.get(id);\n  if (taskConfig === null) return;\n  let { idx, list } = idxFromTask(id, taskConfig.status);\n  if (idx === -1) return;\n  let task = list[idx];\n  return { task, config: taskConfig };\n}\n\nfunction addTaskToList(task: Task, list: TaskListState) {\n  list.list.push(task);\n  list.list.sort((a, b) => a.fridx.localeCompare(b.fridx));\n  list.list = list.list;\n  console.log('added task', task, list.list);\n}\n\nfunction removeTaskFromList(taskId: number, list: TaskListState) {\n  let found = false;\n  const newList = list.list.filter((t) => {\n    if (t.id !== taskId) return true;\n    found = true;\n  });\n  if (found) list.list = newList;\n}\n\nexport async function populateTasks() {\n  for await (const taskConfig of taskStore.iterate()) {\n    const task = taskFromTaskConfig(taskConfig);\n    if (taskConfig.status === TASK_SESSION) addTaskToList(task, sessionTasks);\n    if (taskConfig.status === TASK_RECURRING) addTaskToList(task, recurringTasks);\n    if (taskConfig.status === TASK_COMPLETED) addTaskToList(task, completedTasks);\n  }\n}\n\nexport async function createTask(taskConfig: TaskConfig) {\n  const task = await storeTask(taskConfig);\n  if (taskConfig.status === TASK_SESSION) addTaskToList(task, sessionTasks);\n  if (taskConfig.status === TASK_RECURRING) addTaskToList(task, recurringTasks);\n  if (taskConfig.status === TASK_COMPLETED) addTaskToList(task, completedTasks);\n  postTaskMessage({ type: 'createTask', id: task.id });\n}\n\nexport async function deleteTask(task: Task) {\n  await taskStore.delete(task.id);\n  if (task.status === TASK_SESSION) removeTaskFromList(task.id, sessionTasks);\n  if (task.status === TASK_RECURRING) removeTaskFromList(task.id, recurringTasks);\n  if (task.status === TASK_COMPLETED) removeTaskFromList(task.id, completedTasks);\n  postTaskMessage({ type: 'deleteTask', id: task.id });\n}\n\nexport async function updateTask(task: Task, update: Partial<TaskConfig>) {\n  let newConfig: TaskConfig = {\n    description: task.description,\n    status: task.status,\n    timeEstimate: task.timeEstimate,\n    timeRemaining: task.timeRemaining,\n    createdAt: task.createdAt,\n    completedAt: task.completedAt,\n    fridx: task.fridx,\n    ...update,\n    id: task.id,\n  };\n  await taskStore.upsert(newConfig);\n  postTaskMessage({ type: 'updateTask', id: task.id });\n}\n\nexport async function updateTaskField(task: Task, field: keyof TaskConfig, value: any) {\n  let newConfig: TaskConfig = {\n    description: task.description,\n    status: task.status,\n    timeEstimate: task.timeEstimate,\n    timeRemaining: task.timeRemaining,\n    createdAt: task.createdAt,\n    completedAt: task.completedAt,\n    fridx: task.fridx,\n    id: task.id,\n    [field]: value,\n  };\n  await taskStore.upsert(newConfig);\n  postTaskMessage({ type: 'updateTaskField', id: task.id, field, prev: task[field] });\n}\n", "import { generateKeyBetween } from './fridx';\nimport { setupStore } from './storage';\nimport {\n  createTask,\n  deleteTask,\n  updateTask,\n  Task,\n  TaskListState,\n  populateTasks,\n  sessionTasks,\n  recurringTasks,\n  completedTasks,\n  updateTaskField,\n  idxFromId,\n  idxFromTask,\n  taskFromId,\n} from './tasks';\nimport { createState, $, $$, dom } from './tiny';\nimport { TASK_SESSION, TASK_RECURRING, TaskStatus, TASK_COMPLETED } from './types';\nconst { div, h1, button, p, input, span } = dom;\n\nconst DEFAULT_TASK_TIME = 25 * 60;\n\nsetupStore().then(() => {\n  populateTasks();\n});\n\nlet commonTaskStyles = {\n  display: 'flex',\n  justifyContent: 'space-between',\n  padding: '0.5rem',\n};\nlet styles = {\n  task: {\n    ...commonTaskStyles,\n    borderTop: '1px solid #ccc',\n    borderBottom: '1px solid #ccc',\n  },\n  taskDropTop: {\n    ...commonTaskStyles,\n    borderTop: '1px solid #f00',\n    borderBottom: '1px solid #ccc',\n  },\n  taskDropBottom: {\n    ...commonTaskStyles,\n    borderTop: '1px solid #ccc',\n    borderBottom: '1px solid #f00',\n  },\n  taskDeleteButton: {\n    marginLeft: '1rem',\n  },\n};\n\n/**\n * 1h 30m => 90 * 60\n * 2H => 2 * 60 * 60\n * 25m => 25 * 60\n * 30 => 30 * 60\n */\nfunction parseHumanReadableTime(hrTime: string): number {\n  try {\n    let timeStr = hrTime.trim().toLowerCase();\n    let time = 0;\n    let includesHours = timeStr.includes('h');\n    let includesMinutes = timeStr.includes('m');\n    if (includesHours) {\n      const hours = parseInt(timeStr.split('h', 2)[0]);\n      if (hours) time += hours * 60 * 60;\n      timeStr = timeStr.split('h', 2)[1];\n    }\n    if (includesMinutes) {\n      const minutes = parseInt(timeStr.split('m', 2)[0]);\n      if (minutes) time += minutes * 60;\n    }\n    if (!includesHours && !includesMinutes) {\n      time = parseInt(timeStr) * 60;\n    }\n    return time;\n  } catch (e) {\n    return DEFAULT_TASK_TIME;\n  }\n}\n\nfunction formatTime(time: number): string {\n  const hours = Math.floor(time / 3600);\n  const minutes = Math.floor((time % 3600) / 60);\n  let res = '';\n  if (hours > 0) res += `${hours}h `;\n  if (minutes > 0) res += `${minutes}m`;\n  if (res === '') res = '0m';\n  return res;\n}\n\nfunction taskView(task: Task) {\n  const descriptionInput = input({\n    value: task.description,\n    oninput: (e) => {\n      updateTaskField(task, 'description', e.target.value);\n    },\n  }) as HTMLInputElement;\n  task.addUpdate('description', () => {\n    descriptionInput.value = task.description;\n  });\n\n  const timeEstimateInput = input({\n    value: formatTime(task.timeEstimate),\n    onblur: (e) => {\n      updateTimeEstimate(e);\n    },\n    onkeydown: (e) => {\n      if (e.key === 'Enter') {\n        updateTimeEstimate(e);\n      }\n    },\n  }) as HTMLInputElement;\n  task.addUpdate('timeEstimate', () => {\n    timeEstimateInput.value = formatTime(task.timeEstimate);\n  });\n  function updateTimeEstimate(e) {\n    let time = parseHumanReadableTime(e.target.value);\n    updateTaskField(task, 'timeEstimate', time);\n    timeEstimateInput.value = formatTime(time);\n  }\n\n  const buttonContainer = div();\n  const DndHandle = span(\n    {\n      style: { cursor: 'grab', userSelect: 'none' },\n      ondrag: (e) => {\n        console.log('dragging');\n      },\n      ondragstart: (e) => {\n        console.log('drag start');\n        e.dataTransfer.setData('text/plain', task.id.toString());\n        e.dataTransfer.effectAllowed = 'move';\n      },\n    },\n    '\uD83D\uDD32',\n  );\n  const taskDiv = div({\n    className: 'task',\n    style: styles.task,\n    draggable: true,\n    ondragover: (e) => {\n      e.preventDefault();\n      e.dataTransfer.dropEffect = 'move';\n      console.log('drag over', e);\n      // find whether the mouse is closer to the top or bottom of the element\n      const rect = taskDiv.getBoundingClientRect();\n      const y = e.clientY - rect.top;\n      if (y > rect.height / 2) {\n        Object.assign(taskDiv.style, styles.taskDropBottom);\n      } else {\n        Object.assign(taskDiv.style, styles.taskDropTop);\n      }\n    },\n    ondrop: async (e) => {\n      e.preventDefault();\n      try {\n        console.log('drop?', e.dataTransfer.getData('text/plain'), e);\n        const taskId = parseInt(e.dataTransfer.getData('text/plain'));\n        const rect = taskDiv.getBoundingClientRect();\n        const y = e.clientY - rect.top;\n        let { idx, list } = idxFromTask(task.id, task.status);\n        let newFridx = null;\n        if (y > rect.height / 2) {\n          console.log('drop bottom');\n          // drop below\n          let otherTask = list[idx + 1];\n          let nextTaskFridx = otherTask?.fridx || null;\n          newFridx = generateKeyBetween(task.fridx, nextTaskFridx);\n        } else {\n          console.log('drop top');\n          // drop above\n          let prevTask = list[idx - 1];\n          let prevTaskFridx = prevTask?.fridx || null;\n          newFridx = generateKeyBetween(prevTaskFridx, task.fridx);\n        }\n        console.log('new fridx', newFridx, taskId);\n        let droppedTask = await taskFromId(taskId);\n        updateTaskField(droppedTask!.task, 'fridx', newFridx);\n      } catch (e) {\n        console.error(e);\n      } finally {\n        Object.assign(taskDiv.style, styles.task);\n      }\n    },\n    ondragleave: (e) => {\n      e.preventDefault();\n      Object.assign(taskDiv.style, styles.task);\n    },\n  });\n  const update = () => {\n    taskDiv.innerHTML = '';\n    taskDiv.append(DndHandle);\n    taskDiv.append(descriptionInput);\n    taskDiv.append(timeEstimateInput);\n    taskDiv.append(buttonContainer);\n  };\n  update();\n\n  const deleteButton = button(\n    { style: styles.taskDeleteButton, onclick: () => deleteTask(task) },\n    'X',\n  );\n  const promoteButton = button(\n    {\n      onclick: () => {\n        let description = task.description;\n        if (!description) return;\n        const time = Date.now();\n        createTask({\n          id: 0,\n          description,\n          status: TASK_SESSION,\n          timeEstimate: task.timeEstimate,\n          timeRemaining: 0,\n          createdAt: time,\n          completedAt: 0,\n          fridx: '',\n        });\n      },\n    },\n    'Queue',\n  );\n  const updateButtons = () => {\n    buttonContainer.innerHTML = '';\n    if (task.status === TASK_RECURRING) buttonContainer.append(promoteButton);\n    if (task.status !== TASK_COMPLETED) buttonContainer.append(deleteButton);\n  };\n  updateButtons();\n  task.addUpdate('status', updateButtons);\n\n  return taskDiv;\n}\n\nfunction taskListView(tasks: TaskListState) {\n  const taskListDiv = div({ className: 'task-list' });\n  const update = () => {\n    taskListDiv.innerHTML = '';\n    tasks.list.forEach((t) => taskListDiv.append(taskView(t)));\n  };\n  tasks.addUpdate('list', update);\n  return taskListDiv;\n}\n\nfunction newTaskInput({ status }: { status: TaskStatus }) {\n  return input({\n    type: 'text',\n    placeholder: 'Add a task',\n    onkeydown: (e) => {\n      if (e.key === 'Enter') {\n        const description = e.target.value;\n        if (!description) return;\n        const time = Date.now();\n        createTask({\n          id: 0,\n          description,\n          status,\n          timeEstimate: DEFAULT_TASK_TIME,\n          timeRemaining: 0,\n          createdAt: time,\n          completedAt: 0,\n          fridx: '',\n        });\n        e.target.value = '';\n      }\n    },\n  });\n}\n\nfunction sessionTasksView() {\n  return div(\n    { className: 'session-tasks' },\n    h1('Session Tasks'),\n    taskListView(sessionTasks),\n    newTaskInput({ status: TASK_SESSION }),\n  );\n}\n\nfunction recurringTasksView() {\n  return div(\n    { className: 'recurring-tasks' },\n    h1('Recurring Tasks'),\n    taskListView(recurringTasks),\n    newTaskInput({ status: TASK_RECURRING }),\n  );\n}\n\nfunction completedTasksView() {\n  return div(\n    { className: 'completed-tasks' },\n    h1('Completed Tasks'),\n\n    taskListView(completedTasks),\n  );\n}\n\nfunction ui() {\n  const tasksBar = div(\n    { className: 'tasks-bar' },\n    sessionTasksView(),\n    recurringTasksView(),\n    completedTasksView(),\n  );\n  return tasksBar;\n}\n\n$('#app')?.append(ui());\n"],
  "mappings": "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",
  "names": ["ib", "fb", "ia", "fa", "i", "p", "e"]
}
